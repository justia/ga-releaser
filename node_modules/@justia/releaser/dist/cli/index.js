#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const release_it_1 = __importDefault(require("release-it"));
const index_1 = __importDefault(require("../index"));
const log_1 = __importDefault(require("../log"));
const utilities_1 = require("../utilities");
const github_1 = require("../github");
const commands_1 = require("./commands");
const run = async () => {
    const args = process.argv;
    const localInput = await github_1.readWorkflowConfig();
    const config = github_1.loadInputIntoConfig(index_1.default, localInput);
    /**
     * Get option of argument
     */
    const getOption = (arg) => {
        return arg.split('=')[1];
    };
    /**
     * Find argument from process args
     */
    const findArgument = (arg) => {
        const matchedArgument = args.find((i) => {
            return i.includes(arg);
        });
        return matchedArgument ? matchedArgument.split('--')[1] : '';
    };
    /**
     * Run release
     */
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    const runRelease = (options) => {
        void log_1.default.group('release-it', () => {
            return release_it_1.default(options)
                .then((output) => {
                if (output) {
                    log_1.default.setOutput('json-result', output);
                    log_1.default.setOutput('version', output.version);
                    log_1.default.setOutput('latest-version', output.latestVersion);
                    log_1.default.setOutput('changelog', output.changelog);
                }
                return new Promise(() => null);
            })
                .catch((error) => {
                log_1.default.setFailed(error);
            });
        });
    };
    let isDebugEnv = utilities_1.isGitHubAction;
    const isExecutable = !args
        .map((arg) => {
        const argument = (findArgument(arg) || '').split('=')[0];
        const option = getOption(arg);
        switch (argument) {
            case 'config':
                return commands_1.configCommand(option, config);
            case 'calver':
                return commands_1.calverCommand(option, config);
            case 'increment':
                return commands_1.incrementCommand(option, config);
            case 'tag':
                return commands_1.tagCommand(config);
            case 'help':
                return commands_1.helpCommand();
            case 'debug':
                isDebugEnv = true;
                return true;
            default:
                return true;
        }
    })
        .some((bool) => !bool);
    if (!isExecutable) {
        return;
    }
    if (isDebugEnv) {
        // eslint-disable-next-line @typescript-eslint/require-await
        await log_1.default.group('Release IT config', async () => log_1.default.info(JSON.stringify(config)));
    }
    runRelease(config);
};
void run().catch((error) => log_1.default.error(error));
