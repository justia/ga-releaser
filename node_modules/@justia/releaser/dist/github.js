"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadInputIntoConfig = exports.readWorkflowConfig = exports.inputDefaults = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const yaml_1 = __importDefault(require("yaml"));
const github_1 = require("@actions/github");
const log_1 = __importDefault(require("./log"));
const utilities_1 = require("./utilities");
const { payload } = github_1.context;
/* eslint-disable @typescript-eslint/prefer-readonly-parameter-types */
const findConfiguration = (yamlContent) => {
    const { jobs = {} } = yamlContent;
    const releaserStep = Object.values(jobs)
        .reduce((arr, { steps = [] }) => [...arr, ...steps], [])
        .find((step) => { var _a; return (_a = step.uses) === null || _a === void 0 ? void 0 : _a.startsWith('justia/ga-releaser'); });
    let conf = {};
    if (releaserStep && releaserStep.with) {
        conf = releaserStep.with;
    }
    return conf;
};
/* eslint-enable @typescript-eslint/prefer-readonly-parameter-types */
const findAuthor = () => {
    const { pusher } = payload;
    if (pusher) {
        const { name, email } = pusher;
        return { name, email };
    }
    let name;
    let email;
    try {
        name = utilities_1.exec('git config user.name').trim();
    }
    catch (e) {
        name = utilities_1.exec('git log --format="%aN" -1').trim();
    }
    try {
        email = utilities_1.exec('git config user.email').trim();
    }
    catch (e) {
        email = utilities_1.exec('git log --format="%aE" -1').trim();
    }
    return { name, email };
};
const author = findAuthor();
exports.inputDefaults = {
    /* eslint-disable no-template-curly-in-string */
    'git-message': 'chore(release): ${version}',
    'release-name': 'Release ${version}',
    /* eslint-enable no-template-curly-in-string */
    'github-release': true,
    'npm-publish': false,
    preset: 'angular',
    'versioning-specification': 'semver',
    'calver-format': 'YYYY.MM.MICRO',
    'output-file': 'CHANGELOG.md',
    'require-commits': true,
    'require-upstream': false,
    'git-user-name': author.name,
    'git-user-email': author.email,
    'fallback-version': '0.0.0',
    'base-branch': 'master',
    'head-branch': 'develop',
    'use-pr': true,
    'automerge-pr': true,
    'use-version-branch': true,
    'remove-version-branch': true
};
exports.readWorkflowConfig = async () => {
    const { GITHUB_WORKSPACE } = process.env;
    const currentPath = GITHUB_WORKSPACE || process.cwd();
    const releaserWorkflow = path_1.default.join(currentPath, '.github', 'workflows', 'release.yml');
    let configuration = {};
    if (fs_1.default.existsSync(releaserWorkflow)) {
        const fileContent = fs_1.default.readFileSync(releaserWorkflow, 'utf8');
        const yamlContent = (yaml_1.default.parse(fileContent) || {});
        configuration = findConfiguration(yamlContent);
    }
    // eslint-disable-next-line @typescript-eslint/require-await
    return log_1.default.group(`Loading input values...`, async () => Object.entries(exports.inputDefaults).reduce((obj, [key, value]) => {
        const inputValue = log_1.default.getInput(key);
        let finalValue = key in obj ? obj[key] : value;
        if (inputValue !== '') {
            finalValue = utilities_1.isBoolean(value) ? utilities_1.parseInputBoolean(inputValue, !!finalValue) : inputValue;
        }
        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
        log_1.default.info(`${key}: ${finalValue}`);
        return { ...obj, [key]: finalValue };
    }, configuration));
};
exports.loadInputIntoConfig = (
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
defaultConfig, input) => {
    const config = { ...defaultConfig };
    utilities_1.mergeDeep(config, {
        git: {
            commitMessage: input['git-message'],
            requireCommits: input['require-commits'],
            requireUpstream: input['require-upstream']
        },
        github: {
            release: input['github-release'],
            releaseName: input['release-name']
        },
        npm: {
            publish: input['npm-publish']
        },
        plugins: {
            '@justia/releaser/dist/plugins/conventional-changelog.js': {
                preset: input.preset,
                infile: input['output-file']
            },
            '@justia/releaser/dist/plugins/github.js': {
                usePr: input['use-pr'],
                automergePr: input['automerge-pr']
            },
            '@justia/releaser/dist/plugins/git-config.js': {
                removeVersionBranch: input['remove-version-branch'],
                name: input['git-user-name'],
                email: input['git-user-email']
            }
        },
        ci: 'ci' in config ? config.ci : utilities_1.isGitHubAction,
        requireBranch: input['head-branch'],
        justia: {
            fallbackVersion: input['fallback-version'],
            baseBranch: input['base-branch'],
            headBranch: input['head-branch'],
            useVersionBranch: input['use-version-branch'],
            calverFormat: input['calver-format']
        }
    });
    if (!config.plugins) {
        config.plugins = {};
    }
    if (input['versioning-specification'] === 'calver') {
        config.plugins = {
            '@justia/releaser/dist/plugins/calver.js': {
                format: input['calver-format']
            },
            ...config.plugins
        };
    }
    const { inputs: { increment } = {} } = payload;
    if (increment) {
        utilities_1.mergeDeep(config, { increment });
    }
    return config;
};
