"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.mergeDeep = exports.isObject = exports.jsonParseRelaxed = exports.isGitHubAction = exports.dirname = exports.isBoolean = exports.parseInputBoolean = exports.exec = void 0;
const path_1 = __importDefault(require("path"));
const child_process_1 = require("child_process");
exports.exec = (command) => child_process_1.execSync(command, { encoding: 'utf8' });
exports.parseInputBoolean = (value, defaultValue) => value !== undefined && value !== '' ? value === 'true' : defaultValue;
exports.isBoolean = (val) => typeof val === 'boolean';
exports.dirname = path_1.default.resolve(__dirname);
exports.isGitHubAction = process.env.GITHUB_ACTIONS === 'true';
exports.jsonParseRelaxed = (badJson) => badJson
    // Replace ":" with "@colon@" if it's between double-quotes
    .replace(/:\s*"([^"]*)"/g, (_match, p1) => {
    return `: "${p1.replace(/:/g, '@colon@')}"`;
})
    // Replace ":" with "@colon@" if it's between single-quotes
    .replace(/:\s*'([^']*)'/g, (_match, p1) => {
    return `: "${p1.replace(/:/g, '@colon@')}"`;
})
    // Add double-quotes around any tokens before the remaining ":"
    .replace(/(['"])?([a-z0-9A-Z_]+)(['"])?\s*:/g, '"$2": ')
    // Turn "@colon@" back into ":"
    .replace(/@colon@/g, ':');
/**
 * Simple object check.
 * More info: https://stackoverflow.com/a/34749873/5368140
 */
exports.isObject = (item) => {
    return item && typeof item === 'object' && !Array.isArray(item);
};
/**
 * Deep merge two objects.
 * More info: https://stackoverflow.com/a/34749873/5368140
 */
/* eslint-disable @typescript-eslint/prefer-readonly-parameter-types */
exports.mergeDeep = (target, ...sources) => {
    /* eslint-enable @typescript-eslint/prefer-readonly-parameter-types */
    if (!sources.length)
        return target;
    const source = sources.shift();
    if (exports.isObject(target) && exports.isObject(source)) {
        Object.keys(source).forEach((key) => {
            if (exports.isObject(source[key])) {
                if (!target[key])
                    Object.assign(target, { [key]: {} });
                exports.mergeDeep(target[key], source[key]);
            }
            else {
                Object.assign(target, { [key]: source[key] });
            }
        });
    }
    return exports.mergeDeep(target, ...sources);
};
