"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const release_it_1 = require("release-it");
const github_1 = require("@actions/github");
const log_1 = __importDefault(require("../log"));
const { GITHUB_TOKEN = '', RELEASER_BYPASS_PR_TOKEN = '' } = process.env;
class GitHubPlugin extends release_it_1.Plugin {
    constructor() {
        super(...arguments);
        this.octokit = (0, github_1.getOctokit)(GITHUB_TOKEN);
        this.isEnabled = false;
        this.owner = '';
        this.repo = '';
    }
    init() {
        const { usePr } = this.options;
        const { baseBranch, headBranch, useVersionBranch } = this.config.options.justia;
        const isSameBranch = headBranch === baseBranch;
        this.isEnabled = usePr && (!isSameBranch || useVersionBranch);
        this.registerPrompts();
    }
    /**
     * Register prompts to CLI version
     */
    registerPrompts() {
        super.registerPrompts({
            create_pull_request: {
                type: 'confirm',
                message: () => 'Do you want to create a Github pull request?',
                default: true
            },
            merge_pull_request: {
                type: 'confirm',
                message: () => 'Do you want to merge the created pull request?',
                default: true
            }
        });
    }
    async afterRelease() {
        if (!this.isEnabled) {
            return Promise.resolve();
        }
        const { version, changelog, repo } = this.config.getContext();
        this.setRepoInformation(repo);
        try {
            const { data } = await this.step({
                enabled: true,
                task: () => this.createPullRequest(version, changelog),
                label: 'Git create pull request',
                prompt: 'create_pull_request'
            });
            const { automergePr } = this.options;
            if (!automergePr) {
                return await new Promise(() => null);
            }
            return await this.step({
                enabled: true,
                task: async () => {
                    return this.mergePullRequest(data.number);
                },
                label: 'Git merge pull request',
                prompt: 'merge_pull_request'
            });
        }
        catch (err) {
            this.log.error(`An error occurred while creating the pull request`);
            this.log.error(err);
            this.debug(err);
        }
        return new Promise(() => null);
    }
    /**
     * Set repo information to local GIT
     */
    setRepoInformation(repo) {
        const { owner, project } = repo;
        this.owner = owner;
        this.repo = project;
    }
    /**
     * Create the Github pull request
     */
    async createPullRequest(version, body) {
        const { baseBranch, headBranch, useVersionBranch } = this.config.options.justia;
        const release = `v${version}`;
        const branch = useVersionBranch ? release : headBranch;
        const base = baseBranch;
        const { owner, repo } = this;
        const pr = {
            title: `Release ${release}`,
            body,
            owner,
            repo,
            head: branch,
            base,
            maintainer_can_modify: true,
            draft: false
        };
        return this.octokit.rest.pulls.create(pr);
    }
    /**
     * Merge the Github pull request
     */
    async mergePullRequest(number) {
        return this.octokitMergePullRequest(this.octokit, number).catch((err) => {
            // If the merge fails, an attempt will be made to merge it with an administrator token if one exists.
            if (!RELEASER_BYPASS_PR_TOKEN) {
                throw err;
            }
            log_1.default.info(`The merge failed, an attempt will be made to escalate it with an administrator token from the env var RELEASER_BYPASS_PR_TOKEN.`);
            log_1.default.debug(JSON.stringify(err.message));
            const escalatedOctokit = (0, github_1.getOctokit)(RELEASER_BYPASS_PR_TOKEN);
            return this.octokitMergePullRequest(escalatedOctokit, number);
        });
    }
    async octokitMergePullRequest(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    octokit, number) {
        const { owner, repo } = this;
        return octokit.rest.pulls.merge({
            owner,
            repo,
            pull_number: number
        });
    }
}
module.exports = GitHubPlugin;
