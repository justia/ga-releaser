"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
const release_it_1 = require("release-it");
const calver_1 = __importDefault(require("calver"));
const index_1 = __importDefault(require("../index"));
const { justia: { calverFormat } } = index_1.default;
class CalverPlugin extends release_it_1.Plugin {
    /**
     * Get calendar versioning format
     */
    getFormat() {
        const { format } = this.getContext();
        return format || calverFormat;
    }
    /**
     * Get latest tag from context
     */
    getLatestTag() {
        return this.getContext('latestTag') || this.config.getContext('latestTag');
    }
    getLatestVersion() {
        const latestTagName = this.getLatestTag();
        const { fallbackVersion } = this.config.options.justia;
        return latestTagName ? latestTagName.replace(/^v/, '') : fallbackVersion;
    }
    getIncrementedVersion({ latestVersion }) {
        let calver;
        try {
            calver = new calver_1.default(this.getFormat(), latestVersion);
        }
        catch (e) {
            return this.getIncrementedVersion({ latestVersion: '' });
        }
        if (calver.get() === latestVersion) {
            calver = calver.inc('micro');
        }
        return calver.get();
    }
    getIncrementedVersionCI({ latestVersion }) {
        return this.getIncrementedVersion({ latestVersion });
    }
    getIncrement({ latestVersion }) {
        return this.getIncrementedVersion({ latestVersion });
    }
}
module.exports = CalverPlugin;
