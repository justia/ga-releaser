"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
const core = __importStar(require("@actions/core"));
class GithubLog {
    constructor() {
        this.console = core;
    }
    getInput(name, options) {
        return this.console.getInput(name, options);
    }
    setOutput(name, value) {
        return this.console.setOutput(name, value);
    }
    isDebug() {
        return this.console.isDebug();
    }
    debug(message) {
        return this.console.debug(message);
    }
    setFailed(message) {
        return this.console.setFailed(message);
    }
    error(message) {
        return this.console.error(message);
    }
    warning(message) {
        return this.console.warning(message);
    }
    info(message) {
        return this.console.info(message);
    }
    log(message) {
        return this.info(message);
    }
    startGroup(name) {
        return this.console.startGroup(name);
    }
    endGroup() {
        return this.console.endGroup();
    }
    async group(name, fn) {
        return this.console.group(name, fn);
    }
}
module.exports = GithubLog;
